﻿
<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="Web.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
    <!-- Configuración de Firebase -->
    <script>
          const firebaseConfig = {
          apiKey: "AIzaSyAcN26HkEG_yGRX8-c8OgszZcEuuKtuHmk",
          authDomain: "biblio2023-5e689.firebaseapp.com",
          projectId: "biblio2023-5e689",
          storageBucket: "biblio2023-5e689.firebasestorage.app",
          messagingSenderId: "1034893637506",
          appId: "1:1034893637506:web:6a80d52712eb0070b1819b",
          measurementId: "G-672CS0BJQL"
        };
        firebase.initializeApp(firebaseConfig);
        console.log(firebase);
        window.firebaseAuth = {
            getUserToken: async function () {
                const user = firebase.auth().currentUser;
                if (user) {
                    return await user.getIdToken();
                } else {
                    return null;
                }
            },
            signInWithEmailPassword: async function (email, password, rememberPassword) {
                try {
                    if (rememberPassword) {
                        await firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);
                    } else {
                        await firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);
                    }
                    const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);
                    console.log(userCredential);
                    return userCredential.user;
                } catch (error) {
                    console.error("Error en autenticación:", error.message);
                    return null;
                }
            },
            createUserWithEmailAndPassword: async function (email, password, displayName) {
                try {
                    //imprimo por consola los parámetros que llegan
                    console.log(`email=${email} password=${password} displayName=${displayName}`)
                    const userCredential = await firebase.auth().createUserWithEmailAndPassword(email, password);
                    // El usuario se ha creado correctamente
                    const user = userCredential.user;

                    // Actualizar el perfil del usuario
                    user.updateProfile({
                        displayName: displayName
                    });

                    //Enviar correo de verificación
                    user.sendEmailVerification();

                    return userCredential.user.uid;



                } catch (error) {
                    console.error("Error en autenticación:", error.message);
                    return null;
                }

            },

            signOut: async function () {
                await firebase.auth().signOut();
            },

            getUserFirebase: async function () {
                return new Promise((resolve, reject) => {
                    firebase.auth().onAuthStateChanged((user) => {
                        if (user) {
                            provider = user.providerData[0].providerId;
                            console.log(provider);

                            if (provider == "facebook.com" || provider == "google.com") {
                                user._delegate.emailVerified = true;
                            }
                            resolve(user);
                        } else {
                            resolve(null);
                        }
                    });
                });
            },
            loginWithGoogle: async function () {
                var provider = new firebase.auth.GoogleAuthProvider();
                try {
                    //const result = await firebase.auth().signInWithRedirect(provider);
                    const result = await firebase.auth().signInWithPopup(provider);
                    return result.user;
                } catch (error) {
                    console.error("Error durante el inicio de sesión:", error.code, error.message);
                    return null;
                }
            }
        };

    </script>
</body>

</html>