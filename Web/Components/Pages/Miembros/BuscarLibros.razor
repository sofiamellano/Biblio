@page "/miembros/buscar-libros"
@inject ILibroService _libroService
@inject SweetAlertService _sweetAlert
@inject NavigationManager _navigationManager
@rendermode InteractiveServer

<div class="search-wrapper">
    <div class="container-fluid py-4">
        
        <!-- Encabezado -->
        <Encabezado Titulo="Buscar Libros" Descripcion="Encuentra libros en nuestro catalogo"/>

        <!-- Sección de búsqueda -->
        <SeccionBusqueda Libros="Libros" OnBuscar="Buscar" />

        <!-- Sección de resultados -->
        @if (hasRendered)
        {
            <ResultadosDeBusqueda Cantidad="Libros.Count" TextoResultado="@((Libros.Count == 1) ? "libro encontrado" : "libros encontrados")" />

            <!-- Lista de libros -->
            @if (Libros.Any())
            {
                <div class="row g-4">
                    @foreach (var libro in Libros)
                    {
                        <CardLibro libro="libro"/> 
                        @* <!-- Botón de acción -->
                        <div class="col-auto">
                            <button class="btn btn-primary btn-lg rounded-3" @onclick="() => VerDetalles(libro.Id)">
                                <i class="bi bi-eye me-2"></i>
                                Ver<br />Detalles
                            </button>
                        </div> *@
                    }
                </div>
            }
            else if (!isBusy && hasSearched)
            {
                <!-- Mensaje sin resultados -->
                <div class="card border-warning">
                    <div class="card-body text-center p-5">
                        <i class="bi bi-emoji-frown text-warning" style="font-size: 3rem;"></i>
                        <h4 class="text-warning mt-3">Sin resultados</h4>
                        <p class="text-muted">Intenta con otros términos de búsqueda o ajusta los filtros</p>
                        <small class="text-muted">
                            <i class="bi bi-lightbulb me-1"></i>
                            Tip: Usa palabras clave simples y verifica que los filtros apropiados estén seleccionados
                        </small>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private bool hasSearched = false;
    private bool hasRendered = false;
    private bool isBusy = false;
    
    private List<Libro> Libros = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
            await Buscar(new FilterLibroDTO(){ForTitulo = true});
            StateHasChanged();
        }
    }

    private async Task Buscar(FilterLibroDTO filter)
    {
        if (isBusy) return;

        try
        {
            isBusy = true;
            hasSearched = true;
            StateHasChanged();
            Libros = await _libroService.GetWithFilterAsync(filter);
            isBusy = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Solo usar SweetAlert si ya se ha renderizado
            if (hasRendered)
            {
                await _sweetAlert.FireAsync("Error", $"Error al buscar libros: {ex.Message}", SweetAlertIcon.Error);
            }
            Libros = new List<Libro>();
        }
        finally
        {
            isBusy = false;
            StateHasChanged();
        }
    }
    // private async Task VerDetalles(int libroId)
    // {
    //     // Navegar a página de detalles del libro
    //     _navigationManager.NavigateTo($"/libro/{libroId}");
    // }
}
